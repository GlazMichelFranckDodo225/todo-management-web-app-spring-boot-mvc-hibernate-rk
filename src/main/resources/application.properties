spring.application.name=todo-management-web-app-spring-boot-mvc-hibernate-rk
# server.port=8081
# View Resolver
# Entire Path ==> /src/main/resources/META-INF/resources/WEB-INF/
# jsp/sayHello.jsp
# Spring MVC Already Know the Path ==> /src/main/resources/
# META-INF/resources
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
# logging.level.org.springframework=debug
# logging.level.org.springframework=info
# logging.level.com.dgmf=debug
# logging.level.com.dgmf=info
logging.level.com.dgmf=warn

# Common Application Properties : https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html
# MySQL
# To configure JDBC Url to connect to DB
spring.datasource.url=jdbc:mysql://localhost:3306/db_java_web_app_spring-boot_hibernate_rk?useSSl=false&createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=*ruTuch7D7ub

# Loading class `com.mysql.jdbc.Driver'==> This is deprecated.
# The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is
# automatically registered via the SPI and manual loading of the driver
# class is generally unnecessary.
# spring.datasource.driverClassName=com.mysql.jdbc.Driver

## JPA and Hibernate Properties
# To generate better SQL queries for the database based
# on the chosen Dialect Class
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# Spring Boot 3 uses Hibernate 6 which Allows Us to Not Specify the Dialect.
# Hibernate Automatically Detects Dialect Based on Various Criteria.
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# To print the queries into the console
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.show-sql=true
# Only in Dev mode
# NONE: (disable the hbm2ddl.auto) To avoid Hibernate manages automatically the DB
# Schema. We have to manually manage our DB by ourselves
# CREATE-ONLY: To generate the DB Schema from the Entity Model
# DROP: To drop the DB Schema based on the Entities Models
# CREATE: To drop existing DB Schema and Recreate it afterward based
# on the Entities Models
# CREATE-DROP: To drop existing DB Schema and Recreate it afterward based
## on the Entities Models and when JPA EntityManagerFactory or Hibernate SessionFactory
# is closed, Drop the DB Schema again
# VALIDATE: To validate the underlying DB based on the Entity Mappings,
# UPDATE: To update the existing DB Schema once the Mapping changes
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl.auto=update
# To well format queries
spring.jpa.properties.hibernate.format_sql=true

# Spring Logging Level Properties
spring.logging.level.org.hibernate.SQL=DEBUG
spring.logging.level.org.hibernate.type=TRACE

# Date formatting
spring.mvc.format.date=yyyy-MM-dd

# Spring Current Active Profile
spring.profiles.active=local

# Spring Security Default User Properties
# spring.security.user.name=GlazDodo
# spring.security.user.password=12345
# spring.security.user.roles=ADMIN

# spring.data.rest.base-path=/api